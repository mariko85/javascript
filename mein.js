
 
// // // // // // //  //loop 


// // // // // // //   რიცხვების დაბეჭდვა 1-დან 10-მდე:  for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს რიცხვებს 1-დან 10-მდე. 

// // // // // // // ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს რიცხვებს 1-დან 10-მდე. 

// // // // // // // for (let i=1; i<10 ; i++ ) {
// // // // // // //    console.log(i);
// // // // // // // }


// // // // // // // let i=1;
// // // // // // // while(i<10) {
// // // // // // //     console.log(i);
// // // // // // //     i++;
// // // // // // // }



// // // // // // // ლუწი რიცხვების დაბეჭდვა 2-დან 20-მდე: for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს ლუწ რიცხვებს 2-დან 20-მდე. 

// // // // // // // ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს ლუწ რიცხვებს 2-დან 20-მდე. 


// // // // // // // for (let i=2; i<20 ; i++) {
// // // // // // //       console.log(i);
// // // // // // //    }

// // // // // // // //   რიცხვების ამოწერა უკუღმა:  for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს რიცხვებს 10-დან 1-მდე.
// // // // // // // //  ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს რიცხვებს 10-დან 1-მდე. 


// // // // // // // for (let i = 10; i > 0 ; i--){
// // // // // // //     console.log(i);
// // // // // // // }

// // // // // // // let i = 10;
// // // // // // // while (i> 0){
// // // // // // //     console.log(i);
// // // // // // //     i --;
// // // // // // // }


// // // // // // // რიცხვების 2 დან 20 დამწერა. ლუწის

// // // // // // // for (let i=2; i<20 ; i+=2  ) {
// // // // // // //     console.log(i);
// // // // // // //  }

// // // // // // //   რიცხვის ლუწი ან კენტი შემოწმება: 

// // // // // // // დაწერეთ კოდი, რომელიც იღებს რიცხვს და ამოწმებს, არის თუ არა ის ლუწი თუ კენტი. თუ რიცხვი ლუწია, დაბეჭდეთ "რიცხვი ლუწია", ხოლო თუ კენტია - "რიცხვი კენტია".



// // // // // // //   რიცხვის დადებითი, უარყოფითი ან ნულის შემოწმება: 

// // // // // // // დაწერეთ კოდი, რომელიც იღებს რიცხვს და ამოწმებს, არის თუ არა ის დადებითი, უარყოფითი ან ნული. შესაბამისად, დაბეჭდეთ "რიცხვი დადებითია", "რიცხვი უარყოფითია" ან "რიცხვი ნულია". 
// // // // // // // let number = -1
// // // // // // // if (number > 0) {
// // // // // // //     console.log('დადებითია')
// // // // // // // }
// // // // // // //  else if (number <0) {
// // // // // // //      console.log('უარყოფითია')
// // // // // // //  }
// // // // // // //   else {
// // // // // // //     console.log('ნულია')
// // // // // // //  }



// // // // // // //   სტუდენტის შეფასების განსაზღვრა ქულის მიხედვით: 

// // // // // // // დაწერეთ კოდი, რომელიც იღებს სტუდენტის ქულას (0-დან 100-მდე) და დაბეჭდავს შესაბამის შეფასებას შემდეგი კრიტერიუმების მიხედვით: 

// // // // // // // 90-100: "A" 

// // // // // // // 80-89: "B" 

// // // // // // // 70-79: "C" 

// // // // // // // // 60-69: "D" 

// // // // // // // // 0-59: "F" 

// // // // // // // let score =80;
// // // // // // // if (score >= 90 && score<=100) {
// // // // // // // console.log("A");
// // // // // // // }else if (score  >= 80 && score <= 89){
// // // // // // //     console.log("B");

// // // // // // //  }else if (score  >= 70 && score <= 79){
// // // // // // //   console.log("C"); 
// // // // // // //  } else if (score  >= 60 && score <= 69) {
// // // // // // //   console.log("D");
// // // // // // // } else if (score >= 0 && score <= 59 ){
// // // // // // //     console.log("F");
// // // // // // //  }
// // // // // // //    else (score < 0) {
// // // // // // //     console.log("feil");
// // // // // // // }


// // // // // // //   ასაკის მიხედვით კატეგორიის განსაზღვრა: 

// // // // // // // დაწერეთ კოდი, რომელიც იღებს პირის ასაკს და დაბეჭდავს შესაბამის კატეგორიას: 

// // // // // // // 0-12 წელი: "ბავშვი" 

// // // // // // // 13-17 წელი: "მოზარდი" 

// // // // // // // 18-64 წელი: "ზრდასრული" 

// // // // // // // 65 და მეტი: "ხანდაზმული" 


// // // // // // // let age =60;
// // // // // // // if (age >= 0 && age<=12) {
// // // // // // // console.log("ბავშვი" );
// // // // // // // }else if (age >=13  && age<=17){
// // // // // // //     console.log("მოზარდი");

// // // // // // // }else if (age >=18  && age<=64){
// // // // // // //     console.log("ზრდასრული" );
// // // // // // // }

// // // // // // // else if (age >65 ){
// // // // // // //     console.log("ხანდაზმული" );
// // // // // // // }

// // // // // // // else  {
// // // // // // //     console.log("კიდევ ცადე" );
// // // // // // // }
  


// // // // // // // რიცხვების ჯამის გამოთვლა 1-დან 100-მდე: 

// // // // // // // for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით გამოთვლის რიცხვების ჯამს 1-დან 100-მდე. 
// // // // // // // //   let sum =0;
// // // // // // // // for (let i=1; i<= 100; i++ ){
// // // // // // //     sum =sum+i 
// // // // // // // }
// // // // // // // console.log(sum);



// // // // // // //   რიცხვების დაბეჭდვა 1-დან 10-მდე: 

// // // // // // // for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს რიცხვებს 1-დან 10-მდე. 

// // // // // // // ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს რიცხვებს 1-დან 10-მდე. 

// // // // // // // for (i=0; i<10; i++){
// // // // // // //     console.log(i);
// // // // // // // }
// // // // // // // i=0;
// // // // // // // while(i<10)
// // // // // // // {
// // // // // // //     console.log(i);
// // // // // // //     i++;
// // // // // // // }

// // // // // // //   ლუწი რიცხვების დაბეჭდვა 2-დან 20-მდე: 

// // // // // // // for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს ლუწ რიცხვებს 2-დან 20-მდე. 

// // // // // // // ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს ლუწ რიცხვებს 2-დან 20-მდე. 


// // // // // // // for(i=2; i<20; i+=2 ){
// // // // // // //     console.log(i);
// // // // // // // }



// // // // // // //  ( არ არის სავალდებულო) რიცხვების ჯამის გამოთვლა 1-დან 100-მდე: 

// // // // // // // for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით გამოთვლის რიცხვების ჯამს 1-დან 100-მდე. 

// // // // // // // while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით გამოთვლის რიცხვების ჯამს 1-დან 100-მდე. 
// // // // // // let sum = 0;
// // // // // // for(let i = 1; i <= 100; i++){
// // // // // //     sum = sum + i;
    
// // // // // // }

// // // // // // console.log(sum);
// // // // // // //   რიცხვების ამოწერა უკუღმა: 

// // // // // // // for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს რიცხვებს 10-დან 1-მდე. 

// // // // // // // ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს რიცხვებს 10-დან 1-მდე. 
// // // // // // // for( i=10; i>0; i--){
// // // // // // //     console.log(i)
// // // // // // // }


// // // // // //   რიცხვის ლუწი ან კენტი შემოწმება: 

// // // // // // // დაწერეთ კოდი, რომელიც იღებს რიცხვს და ამოწმებს, არის თუ არა ის ლუწი თუ კენტი. თუ რიცხვი ლუწია, დაბეჭდეთ "რიცხვი ლუწია", ხოლო თუ კენტია - "რიცხვი კენტია". 

// // // // // // let number=51;
// // // // // //  if(number % 2 ===0){
// // // // // //     console.log('luwia')

// // // // // //  }
// // // // // // else{
// // // // // //     console.log('kentia')
// // // // // // }




// // // // // //   რიცხვის დადებითი, უარყოფითი ან ნულის შემოწმება: 

// // // // // // დაწერეთ კოდი, რომელიც იღებს რიცხვს და ამოწმებს, არის თუ არა ის დადებითი, უარყოფითი ან ნული. შესაბამისად, დაბეჭდეთ "რიცხვი დადებითია", "რიცხვი უარყოფითია" ან "რიცხვი ნულია". let number = -5;
// // // // // // if(number>0){
// // // // // //     console.log('დადებითია')
// // // // // // }
// // // // // // else if(number<0){
// // // // // //     console.log('uaryofi?Tia')
// // // // // // }
// // // // // // else{
// // // // // //     console.log('nulia')
// // // // // // }

// // // // // // ( არ არის სავალდებულო)წლის ნაკიანობის შემოწმება: 

// // // // // // დაწერეთ კოდი, რომელიც იღებს წელს და ამოწმებს, არის თუ არა ის ნაკიანი. ნაკიანი წელია, რომელიც იყოფა 4-ზე, მაგრამ არ იყოფა 100-ზე, 
// // // // // // გარდა იმ შემთხვევისა, როცა ის იყოფა 400-ზე. თუ წელი ნაკიანია, დაბეჭდეთ "წელი ნაკიანია", წინააღმდეგ შემთხვევაში - "წელი არ არის ნაკიანი". 

// // // // // // let year =2025;
// // // // // // if((year % 4 ===0 && year %100 !== 0) || year % 400 ===0)
// // // // // // {
// // // // // //     console.log('ნაკიანი')
// // // // // // }
// // // // // // else{
// // // // // //     console.log('ar aris nakiani')
// // // // // // }



// // // // // //   რიცხვის ციფრების რაოდენობის განსაზღვრა: 

// // // // // // დაწერეთ კოდი, რომელიც იღებს რიცხვს და დაბეჭდავს შეტყობინებას, თუ რამდენი ციფრი აქვს მას. მაგალითად, თუ რიცხვი არის 123, დაბეჭდეთ "რიცხვს აქვს 3 ციფრი".

// // // // // //  let number = 1245;
// // // // // //  let result = number.toString().length
// // // // // //  console.log(result.length)



// // // // // //   ( არ არის სავალდებულო)დღის ტიპის განსაზღვრა: 

// // // // // // დაწერეთ კოდი, რომელიც იღებს კვირის დღის ნომერს (1-დან 7-მდე, სადაც 1 შეესაბამება ორშაბათს და 7 - კვირას) და დაბეჭდავს შეტყობინებას, არის თუ არა ეს დღე სამუშაო დღე თუ დასვენების დღე. 

// // // // // //  let day = 7;
// // // // // //  if(day > 1 && day <6 ){
// // // // // //     console.log('samuSao dRe')
// // // // // //  }
// // // // // //  else if (day => 6 && day <= 7 ){
// // // // // //     console.log('dasveneba')
// // // // // //  }
// // // // // //  else{
// // // // // //     console.log('ar Seesabameba')
// // // // // //  }

// // // // // // // let day =4;
// // // // // // // let result =day >1 && day <6 ? 'samuSap' : "არასამუშაო"
// // // // // // // console.log(result)

// // // // // // let number=[1,2,5,8]

// // // // // // for(let num of number)
// // // // // // {
// // // // // //     console.log(num)
// // // // // // }


// // // // // /////  07.02.2025

// // // // // // //   რიცხვების დაბეჭდვა 1-დან 10-მდე:  
// // // // // // for(let num of i);
// // // // // // {consol.log(num);}

// // // // // // // for (let i=1; i<10 ; i++ ) {
// // // // // // //    console.log(i);
// // // // // // // }


// // // // // /

// // // // // // // ლუწი რიცხვების დაბეჭდვა 2-დან 20-მდე: for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს ლუწ რიცხვებს 2-დან 20-მდე. 


// // // // // // // for (let i=2; i<20 ; i++) {
// // // // // // //       console.log(i);
// // // // // // //    }

// // // // // // // //   რიცხვების ამოწერა უკუღმა:  for ციკლით: დაწერეთ კოდი, რომელიც for ციკლის გამოყენებით დაბეჭდავს რიცხვებს 10-დან 1-მდე.
// // // // // // // //  ( არ არის სავალდებულო)while ციკლით: დაწერეთ კოდი, რომელიც while ციკლის გამოყენებით დაბეჭდავს რიცხვებს 10-დან 1-მდე. 


// // // // // // // for (let i = 10; i > 0 ; i--){
// // // // // // //     console.log(i);
// // // // // // // }




// // // // // // // რიცხვების 2 დან 20 დამწერა. ლუწის

// // // // // // // for (let i=2; i<20 ; i+=2  ) {
// // // // // // //     console.log(i);
// // // // // // //  }

// // // // // // //   რიცხვის ლუწი ან კენტი შემოწმება: 

// // // // // // // დაწერეთ კოდი, რომელიც იღებს რიცხვს და ამოწმებს, არის თუ არა ის ლუწი თუ კენტი. თუ რიცხვი ლუწია, დაბეჭდეთ "რიცხვი ლუწია", ხოლო თუ კენტია - "რიცხვი კენტია".



// // // // // // //   რიცხვის დადებითი, უარყოფითი ან ნულის შემოწმება: 




// // // // //  let number = 1 ;
// // // // //  let result = number > 0 ? 'დადებითი'  
// // // // //     : number < 0 ? 'უარყოფითი' : 'ნული' 
// // // // //  console.log(result);
                        




// // // // //    სტუდენტის შეფასების განსაზღვრა ქულის მიხედვით: 


// // // // // let score = 80;
// // // // // let result = score >= 90 && score <=100 ? 'A'
// // // // //  : score >= 80 && score <=89 ? 'B' 
// // // // //  : score >= 70 && score <=79 ? 'C' 
// // // // //  : score >= 60 && score <=69 ? 'D' 
// // // // //  : score >= 0 && score <=59 ? 'D' : 'false'
// // // // //  console.log(result);



// // // // // // //   ასაკის მიხედვით კატეგორიის განსაზღვრა: 

// // // // // let age = 60;
// // // // // let result = age >=0 && age <= 12 ? 'bavSvi' 
// // // // //  :age >=13  && age<=17 ? 'mozardi'
// // // // //  :age >=18  && age<=64 ? 'zrdasruli'
// // // // //  : 'xandazmuli'
// // // // //  console.log(result );

  


// // // // // // // რიცხვების ჯამის გამოთვლა 1-დან 100-მდე: 
// // // // // // // //   let sum =0;
// // // // // // // // for (let i=1; i<= 100; i++ ){
// // // // // // //     sum =sum+i 
// // // // // // // }
// // // // // // // console.log(sum);



// // // // // // //   რიცხვების დაბეჭდვა 1-დან 10-მდე: 
// // // // // for (i=0; i<10; i++){
// // // // // // //     console.log(i);}


// // // // // // //   ლუწი რიცხვების დაბეჭდვა 2-დან 20-მდე: 

// // // // // // // for(i=2; i<20; i+=2 ){
// // // // // // //     console.log(i);
// // // // // // // }



// // // // // რიცხვების ჯამის გამოთვლა 1-დან 100-მდე: 
 
// // // // // // let sum = 0;
// // // // // // for(let i = 1; i <= 100; i++){
// // // // // //     sum = sum + i;
    
// // // // // // }

// // // // // // console.log(sum);
// // // // // // //   რიცხვების ამოწერა უკუღმა: . 
// // // // // // // for( i=10; i>0; i--){
// // // // // // //     console.log(i)
// // // // // // // }


// // // // // // //   რიცხვის ლუწი ან კენტი შემოწმება: 
// // // // // let number=51;
// // // // // let result = number %2 ===0 ? 'ლუწი' : 'კენტი'
// // // // // console.log(result)




// // // // // // //   რიცხვის დადებითი, უარყოფითი ან ნულის შემოწმება: 
// // // // // let number =5;
// // // // // let result = number >0 ? 'დადებითი'  : 'უარყოფითი'
// // // // //     console.log(result)


// // // // //წლის ნაკიანობის შემოწმება: 
// // // // // // დაწერეთ კოდი, რომელიც იღებს წელს და ამოწმებს, არის თუ არა ის ნაკიანი. ნაკიანი წელია, რომელიც იყოფა 4-ზე, მაგრამ არ იყოფა 100-ზე, 
// // // // // // გარდა იმ შემთხვევისა, როცა ის იყოფა 400-ზე. თუ წელი ნაკიანია, დაბეჭდეთ "წელი ნაკიანია", წინააღმდეგ შემთხვევაში - "წელი არ არის ნაკიანი". 
// // // // // let year =2025;
// // // // // let result = (year % 4 ===0 && year %100 !== 0) || year % 400 ===0 ? 'ნაკიანი'
// // // // // :'ar aris nakiani'
// // // // // console.log(result)



// // // // // // //   რიცხვის ციფრების რაოდენობის განსაზღვრა: 
// // // // //  let number = 1245;
// // // // //  let result = number.toString().length
// // // // //  console.log(result.length)



 

// // // // //  დაწერეთ კოდი, რომელიც იღებს კვირის დღის ნომერს (1-დან 7-მდე, სადაც 1 შეესაბამება ორშაბათს და 7 - კვირას) და დაბეჭდავს შეტყობინებას, არის თუ არა ეს დღე სამუშაო დღე თუ დასვენების დღე. 

// // // // // let day = 7;
// // // // // let result= day > 1 && day <6 ? ' samuSao dRe'
// // // // //   : day >= 6 && day <= 7 ? 'dasveneba'
// // // // //    : 'ar Seesabameba'
// // // // //    console.log(result)


// // // // // function sum (a,b)
// // // // // { return a+b}

// // // // //  let result=sum(7,9)
// // // // //  console.log(result)



// // // // // function calcDay( day)
// // // // // {

// // // // //     let result= day > 1 && day <6 ? ' samuSao dRe'
// // // // //      : day >= 6 && day <= 7 ? 'dasveneba'
// // // // //        : 'ar Seesabameba'
// // // // //        return result
// // // // // }


// // // // // let m =calcDay(5)
// // // // // console.log(m)


// // // // // function min(a,b)
// // // // // {
// // // // //     return a-b;
// // // // // }

// // // // // let result= min(6,4)
// // // // // console.log(result)

// // // // //სიმბოლოების დათვლა

// // // // // function st(a)
// // // // // { return  a.length

// // // // // }
// // // // // let result = st('mariiiiii');
// // // // // console.log(result);



// // // // // დავალება: დაწერეთ ფუნქცია reverseString(str), რომელიც მიიღებს სტრინგს და დააბრუნებს მას შებრუნებულად.

// // // // // მინიშნება: გამოიყენეთ for loop, .split(), .reverse(), .join() ან სხვა მეთოდები

// // // // // let resalt2 = '';
// // // // // let text ='mari'
// // // // // let resalt =text.split('')
// // // // // let resalt1 = resalt.reverse();


// // // // // for (let i=0; i<resalt1.length; i++ )
// // // // // {
// // // // //     resalt2=resalt2 +resalt1[i];
// // // // // }

// // // // // console.log(resalt2)


// // // // function reverseString(str) {

// // // // let resalt2 = '';
// // // // let resalt =str.split('')
// // // // let resalt1 = resalt.reverse();

// // // // for (let i=0; i<resalt1.length; i++ )
// // // // {
// // // //     resalt2=resalt2 +resalt1[i];
// // // // }

// // // // return resalt2;

// // // // }
// // // // / დავალება: დაწერეთ ფუნქცია countWords(sentence), რომელიც მიიღებს წინადადებას და დააბრუნებს მასში არსებულ სიტყვების რაოდენობას.


// // // // function countWords(sentence){
   
// // // //     let resalt = sentence.split(" ")
// // // //     return  resalt.length;
// // // // }

// // // // let resalt= countWords ('mari kargi gogoa');
// // // // console.log(resalt)


// // // // დაწერეთ ფუნქცია capitalizeWords(sentence), რომელიც მიიღებს წინადადებას და ყველა სიტყვის პირველ ასოს დიდი ასოთი დაწერს.

// // // // let sentence = ('mari nonna tamo');
// // // // let resalt = sentence.split(" ");
// // // // let resalt1=" ";
// // // // for (let i = 0; i < resalt.length; i++) {
    
// // // //     let resalt1 = resalt1+ (resalt[i]).charAt(0).toUpperCase() + resalt[i].slice(1);
// // // //     console.log(resalt1);
// // // // }
 



// // // // let resalt1=" ";
// // // // function capitalizeWords(sentence) {

// // // //     let resalt= sentence.split(" ");

// // // //     for (let i=0; i < resalt.length; i++)
// // // //       {
        
// // // //          let resalt1= resalt1+ (resalt[i]).charAt(0).toUpperCase()+ resalt[i].slice(1)
// // // //          return resalt1

// // // // }
// // // // }

// // // // let resalt3= capitalizeWords('mari nona tamo')
// // // // console.log(resalt3)




// // // // / // დავალება: შექმენით countEvenNumbers(arr), რომელიც მიიღებს რიცხვების მასივს და დააბრუნებს მასში არსებული ლუწი რიცხვების რაოდენობას.

// // // // // // მინიშნება: გამოიყენეთ for loop და if-else.

// // // // // let resalt1 ="";
// // // // // let resalt ="";
// // // // // let resalt2 ="";
// // // // let resalt=0;
// // // // let resalt1=0;
// // // // let resalt2=0;
// // // // arr = [1,5,6,8,10,22]

// // // // //  for (let i=0; i < arr.length ; i++) 
    
// // // // //       {  
    
         
// // // // //      if  (arr[i]  % 2 ===0) {
// // // // //         resalt1 = arr[i] 
// // // // //         console.log(resalt1)
// // // // //          }
         

// // // //     else{
   
// // // //      }       }
      
// // // //   let array =[1,2,5,58,7,91];
// // // // //   for(i=0; i< array.length; i ++){
// // // // //      if (array[i] %2==1)
// // // // //      {console.log(array[i])}
// // // // //   } 
      
// // // // // შემოკლებული
// // // // for (let item of array)
// // // // {if (item %2===1){
// // // //      console.log(item) }
// // // // }


// // // // function greet(name) { return 'hello' +name}

// // // // let resalt = greet('mari')
// // // // console.log(resalt)

// // // // const greet=function(name) { return 'heloo' + name}

// // // // let resalt = greet('teona')
// // // // console.log(resalt)

// // // // const greet = function(num) = > "hello" + num ;
// // // // let  resalt = greet ('mari')
// // // // console.log(resalt);

// // // // function sum (...num){
// // // //      let resalt = 0;
// // // //      for (let item of num)
// // // //           if (item > 0){
// // // //       resalt = resalt* item;
// // // //           }
// // // //     return resalt
// // // // }

// // // // let sumresalt = sum  (1,3,5,9,0)
// // // // console.log(sumresalt)



// // // 1. დაწერეთ ფუნქცია რომელიც დააბრუნებს მაქსიმალურ რიცხვს


// // // function maxNumber(...num){

// // //     let resalt =num[0];
// // //       for(let item of num){
        
// // //            if (item > resalt){
               
          
// // //                 resalt = item }
              
// // //            }

// // //            return resalt     }
// // //       let resalt1= maxNumber(1,2,9,4,5,6)
// // //       console.log(resalt1)



// // // // // 2.ფუნქცია უნდა მიიღებდეს ორი პარამეტრი (start და end), რომლებიც არის რიცხვები.

// // // ფუნქციამ უნდა დააბრუნოს მასივი სადაც იქნება ამ რიცხვებს შორის არსებული ყველა რიცხვი მაგ ( თუ გადავცემ 3 და 9 , დააბრუნებს 3,4,5,6,7,8,9 -ს  )

// // // function range(start, end){
// // //     let rangearray = [];
// // //     for(let i=start; i<end; i++){
// // //         rangearray.push(i)
// // //     }
// // // return rangearray
// // // }
// // // let resalt=range(2,10)
// // // console.log(resalt)



// // // // // // 4. დაწერეთ ფუნქცია, რომელიც მიიღებს რამდენიმე სახელს და მათ ყველას მიესალმება.
 

// // // function greet(...num){
// // //     let resalt='';
  
    
// // //     for(let item of num ){
// // //         resalt =  resalt +'   ' + 'hello'+' ' + item 
       

// // //     }
// // //   return resalt

   
// // // }

// // //  let resalt1 =greet ('mari', 'nana')
// // //  console.log(resalt1) 


// // // let numbersArray =[2,3,4,8,]
// // // let resalt=numbersArray.filter(num => num %2===0)
// // // console.log(resalt)


// // // let numbersArray =[2,3,49,8,]
// // // let resalt=numbersArray.sort((a,b) => a-b)
// // // console.log(resalt)

// // // let numbersArray =[2,3,49,8,]
// // // let resalt=numbersArray.reduce((ac,curent) =>ac+curent,0)
// // // console.log(resalt)

// // // let numbersArray =[2,3,49,8,]
// // // let resalt=numbersArray.reduce( (ac,curent) => ac + curent,0)
// // // console.log(resalt)

// // // 1a4.02.2025

// // // შექმენით ობიექტი, რომელიც ინახავს მაისურის მონაცემებს:
 
// // // აღწერა (description)
// // // ფერი (color)
// // // ზომა (size)
// // // ფასი (price)
// // // რაოდენობა (quantity)
// // // შემდეგ შექმენით ფუნქცია, რომელიც მიიღებს ამ ობიექტს და მომხმარებლის მიერ შეძენილი მაისურების რაოდენობას.
 
// // // თუ მომხმარებელი ითხოვს საწყობში არსებულზე მეტ რაოდენობას, უნდა დაბრუნდეს ტექსტი: "მარაგში საკმარისი რაოდენობა არ არის!"
// // // წინააღმდეგ შემთხვევაში, ფუნქციამ უნდა დააბრუნოს მაისურების ჯამური ფასი.
 

// // // let number =25
// // // const prodact = {
// // //     description: 'bigest',
// // //      color: 'pink',
// // //      size: 'M',
// // //      price: 15,
// // //      quantity: 20,

// // // }

// // // function tshirtProdact(prodact){
// // //     if (prodact.quantity<  number){
// // // return  "მარაგში საკმარისი რაოდენობა არ არის!"

// // //     }
// // // return prodact.price* number

// // // }

// // // let resalt= tshirtProdact(prodact)
// // // console.log(resalt)


// // // 3.დავალების პირობა:
// // //  შექმენით მაღაზიის ობიექტი (გლობალური scope-ში), რომელიც შეიცავს პროდუქტის მონაცემებს (სახელი, ფასი, რაოდენობა საწყობში).
// // //  შექმენით ფუნქცია (function scope), რომელიც მიიღებს მომხმარებლის შეკვეთას და დააბრუნებს ჯამურ ღირებულებას.
// // //  გამოიყენეთ ბლოკის scope if პირობაში, რათა გამოიანგარიშოთ ფასდაკლება შეკვეთაზე (მაგალითად, 3-ზე მეტი პროდუქტის შეძენისას 10% ფასდაკლება).
// // // დაბეჭდეთ საბოლოო თანხა ეკრანზე.
 
// // //  გლობალური scope - პროდუქტის მონაცემები


// // let number =12
// // const product = {
// //     name: "მაისური",
// //     price: 20,
// //     stock: 10
// // }

// // function functionscope(product){
// //     let sale=0;
// //     let resalt1 =0;
// //     if(product.stock<number){
// //         return 'მარაგი ამოიწურა'
// //     }
// //     else if(number>3) {
// //          sale=(product.price*number)*10/100
// //          resalt1= (product.price*number)-sale
// //         return resalt1
// //     }
    
// //    return product.price*number

// // }


// // let resalt = functionscope(product)
// // console.log(resalt)


 
// //     // ფუნქციის scope - შეკვეთის გამოთვლა
   
 
// //     // ბლოკის scope - ფასდაკლების ლოგიკა
 
 
// //     // მომხმარებლის შეკვეთა

// // // const person ={
// // //     firstname: 'davi',
// // //     lastname: ' chaxva',

// // // }

// // // function fulname(person1){
// // //     return person1.firstname

// // // }
// // // let resalt = fulname(person)
// // // console.log(resalt)




// /////  16.02.2025  axali
let prodacts =[
    
     {name : 'ananasi' ,
    price: 10,
     category :'vegitable',
     inStock : true,
    } ,
    
   {    name : 'banani',
        price: 12,
         category :'frute',
         inStock : true,
        },
    {
        name : 'poteitou',
        price: 5,
         category :'vegitable',
         inStock : true,
            },

     {
    name : 'apple',
    price: 13,
     category :'fruet',
     inStock : false,
    },
    {
        name :' srubery',
        price: 15,
         category :'fruet',
         inStock : false,
        }               
    ]


    // // შესაბამისი პროდუქტის ძიება: მომხმარებელს (prompt()-ის მეშვეობით) შემოატანინეთ პროდუქტის კატეგორია და გამოუტანეთ ამ კატეგორიის ყველა პროდუქტი. 

// //?????????????????// ??????????????????????????????????


let prodactsCadegory=prompt("პროდუქტის კატეგორია")
for(let i=0; i< prodacts.length; i++) {
   
     if(prodactsCadegory.includes(prodacts[i].category)){
       console.log(prodacts[i])
}

}
//     // // მონაცემთა გაფილტვრა და ჩვენება: 
//     // // for ციკლის გამოყენებით გამოიტანეთ ყველა პროდუქტის სახელი და ფასი. 
    
//     // let resalt =[''];
   
//     // for (let i=0; i<prodacts.length;i++){
      
//     //    resalt =  resalt+'    '+ prodacts[i].name +' '+ prodacts[i].price     
     
//     // }
    
//     // console.log(resalt) 


//     // if პირობებით მხოლოდ ის პროდუქტები გამოიტანეთ, რომლებსაც მარაგში აქვთ ( inStock: true ).

//     // for ( let i=0; i<prodacts.length;i++ ) {

//     //     if (prodacts[i].inStock==true) {

//     //         console.log(prodacts[i]) 
//     //     }



//     //  }
        
//     // სტრიქონების მეთოდები: toUpperCase() მეთოდის გამოყენებით ყველა პროდუქტის სახელი გადაიყვანეთ დიდ ასოებში და გამოიტანეთ კონსოლში. 

//     // let resalt =[''];
   
//     //  for (let i=0; i<prodacts.length;i++){
      
//     //    resalt =  resalt+'    '+ prodacts[i].name.charAt(0).toUpperCase()+  prodacts[i].name.slice(1)
     
//     //  }
    
//     //  console.log(resalt) 



// // // საშუალო ფასის გამოთვლა: იპოვეთ ყველა პროდუქტის საშუალო ფასი და დაბეჭდეთ შედეგი. 
// //   let resalt =0;
// //   let resalt1 =0;
   
// //  for (let i=0; i<prodacts.length;i++){
      
// //    resalt =  resalt+ prodacts[i].price
// //    resalt1=resalt/prodacts.length
// //  } 
 
    
// //   console.log(resalt1) 


//   // 


// //   შექმენით ფუნქცია findProduct(name), რომელიც მიიღებს პროდუქტის სახელს და დააბრუნებს მის სრულ ინფორმაციას 
// // (თუ პროდუქტი არსებობს, გამოიტანოს ყველა დეტალი, თუ არ არსებობს, დააბრუნოს "პროდუქტი ვერ მოიძებნა").

// // let resalt='';
// // function findProduct (name){
// //  for(let i=0; i< prodacts.length; i++)
 
// // {
// //     if (prodacts[i].name.includes(name) )
// //     {
// //         resalt =prodacts[i]
// //     }

// //  }

// //    return resalt
// // }

// // let resalt1= findProduct('apple')
// // console.log(resalt1)





// // შექმენით ტურისტული სააგენტოს მონაცემთა სისტემა, სადაც წარმოდგენილი იქნება ტურების სია. ყოველი ტური უნდა იყოს ობიექტი, რომელიც შეიცავს შემდეგ 
// // მონაცემებს: destination (მიმართულება, string) price (ფასი, number) duration (ტურის ხანგრძლივობა დღეში, number) availableSpots (ხელმისაწვდომი ადგილები, number)
// //  ტურების სია შეინახეთ მასივში და გამოიყენეთ სხვადასხვა მეთოდები მონაცემთა დასამუშავებლად.
// // 
// //  დავალების ეტაპები: მასივის შექმნა: შექმენით მასივი (tours),
// //   რომელშიც იქნება მინიმუმ 5 სხვადასხვა ტური. მონაცემთა ჩვენება: for ციკლის გამოყენებით გამოიტანეთ ყველა ტურის დასახელება და ფასი. if პირობებით მხოლოდ 
// //   იმ ტურების მონაცემები გამოიტანეთ, რომელთაც აქვთ 5-ზე მეტი თავისუფალი ადგილი. სტრიქონების მეთოდები: toUpperCase() მეთოდის გამოყენებით ყველა ტურის
// //    მიმართულება გადაიყვანეთ დიდ ასოებში და გამოიტანეთ კონსოლში. ტურის ძიება: მომხმარებელს (prompt()-ის მეშვეობით) შემოატანინეთ ტურის მინიმალური ფასი და 
// //    გამოიტანეთ ამ ფასზე იაფი ტურები. საშუალო ფასის გამოთვლა: გამოითვალეთ ყველა ტურის საშუალო ფასი და დაბეჭდეთ შედეგი. 
// //    დამატებითი დავალება (არასავალდებულო): შექმენით ფუნქცია findTour(destination), რომელიც მიიღებს ტურის მიმართულებას და დააბრუნებს მის სრულ ინფორმაციას 
// //    (თუ ტური არსებობს, გამოიტანოს ყველა დეტალი, თუ არ არსებობს, დააბრუნოს "ტური ვერ მოიძებნა").

// const tours = [
// {
// destination : 'racha',
// price :55,
// duration :19,
// availableSpots: 20,

// },

// {
//     destination : 'kakheti',
//     price :50,
//     duration :18,
//     availableSpots: 10,
//     },
// {
//         destination : 'batumi',
//         price :65,
//         duration :20,
//         availableSpots: 1,
//  }  ,
// {
//     destination : 'svaneti',
//     price :100,
//     duration :18,
//     availableSpots: 25,
// },
// {
//     destination : 'tusheti',
//     price :150,
//     duration :48,
//     availableSpots: 6,
// }

// ]
// // //მონაცემთა ჩვენება: for ციკლის გამოყენებით გამოიტანეთ ყველა ტურის დასახელება და ფასი.
// // let resalt=[];
// // for(item of tours){
  
// //     resalt =resalt+ tours[item].destination+ ' '+tours[item].price + '   '
// // }
// // console.log(resalt)


// // let resalt=[];
// // for(let i=0; i< tours.length; i++){
  
// //     resalt =resalt+ tours[i].destination+ ' '+tours[i].price + '   '
// // }
// // console.log(resalt)


// // if პირობებით მხოლოდ 
// // //   იმ ტურების მონაცემები გამოიტანეთ, რომელთაც აქვთ 5-ზე მეტი თავისუფალი ადგილი.

 
// //  for(let i=0; i< tours.length; i++)
// //     {
// //     if(tours[i].availableSpots>5){
    
// // console.log(tours[i])
// //     }
    
   
// //  }

// // სტრიქონების მეთოდები: toUpperCase() მეთოდის გამოყენებით ყველა ტურის
// // //    მიმართულება გადაიყვანეთ დიდ ასოებში და გამოიტანეთ კონსოლში.

// // let resalt=' ';
// // for(let i=0; i< tours.length; i++){
// //     resalt=resalt +tours[i].destination.charAt(0).toUpperCase()+tours[i].destination.slice(1)+'  '
    
// // }
     
    
// // console.log(resalt)
    
    

// //
// //    

// // საშუალო ფასის გამოთვლა: გამოითვალეთ ყველა ტურის საშუალო ფასი და დაბეჭდეთ შედეგი. 
// // let resalt=0;
// //  let resaltAverige=0;
// //   for(let i=0; i< tours.length; i++)
// //   {
// //     resalt = resalt + tours[i].price  
// //  resaltAverige =resalt/tours.length
   

// //  } 
// //  console.log(resaltAverige)
     
    
// // დამატებითი დავალება (არასავალდებულო): შექმენით ფუნქცია findTour(destination), რომელიც მიიღებს ტურის მიმართულებას და დააბრუნებს მის სრულ ინფორმაციას 
// // //    (თუ ტური არსებობს, გამოიტანოს ყველა დეტალი, თუ არ არსებობს, დააბრუნოს "ტური ვერ მოიძებნა").
// //    let resalt=[];
// // function  findTour(destination){

// //     for(let i=0; i< tours.length; i++){

// //         if( tours[i].destination.includes(destination)){
// //      resalt= tours[i]
    
// //         }
       
// //     }
        
// //     return resalt
     
// // }

// // let resalt1=findTour('batumi','svaneti')
// // console.log(resalt1)

// // ტურის ძიება: მომხმარებელს (prompt()-ის მეშვეობით) შემოატანინეთ ტურის მინიმალური ფასი და 
// //    გამოიტანეთ ამ ფასზე იაფი ტურები.  // ??????????????????????????????????



// // დავალება: საავადმყოფოს პაციენტების მონაცემთა მართვა JavaScript-ში დავალების აღწერა: შექმენით საავადმყოფოს მონაცემთა სისტემა, სადაც წარმოდგენილი იქნება პაციენტების სია.
// //  ყოველი პაციენტი უნდა იყოს ობიექტი, რომელიც შეიცავს შემდეგ მონაცემებს: name (პაციენტის სახელი, string) age (ასაკი, number) diagnosis (დიაგნოზი, string) isHospitalized 
// //  (ჰოსპიტალიზებულია თუ არა, boolean) პაციენტების სია შეინახეთ მასივში და გამოიყენეთ სხვადასხვა მეთოდები მონაცემთა დასამუშავებლად. 

// //  დავალების ეტაპები: მასივის შექმნა: შექმენით მასივი (patients), რომელშიც იქნება მინიმუმ 5 პაციენტის ობიექტი. მონაცემთა 
// //  ჩვენება: for ციკლის გამოყენებით გამოიტანეთ ყველა პაციენტის სახელი და დიაგნოზი. if პირობებით მხოლოდ იმ პაციენტების მონაცემები გამოიტანეთ,
// //   რომლებიც ჰოსპიტალიზებულნი არიან (isHospitalized: true). სტრიქონების მეთოდები: toUpperCase() მეთოდის გამოყენებით ყველა პაციენტის სახელი გადაიყვანეთ დიდ ასოებში და 
// //   გამოიტანეთ კონსოლში. პაციენტის ძიება: მომხმარებელს (prompt()-ის მეშვეობით) შემოატანინეთ დიაგნოზი და გამოიტანეთ იმ პაციენტების მონაცემები, რომლებსაც ეს დიაგნოზი აქვთ. 
// //   საშუალო ასაკის გამოთვლა: გამოითვალეთ ყველა პაციენტის საშუალო ასაკი და დაბეჭდეთ შედეგი. დამატებითი დავალება (არასავალდებულო): შექმენით ფუნქცია findPatient(name), 
// //   რომელიც მიიღებს პაციენტის სახელს და დააბრუნებს მის სრულ ინფორმაციას (თუ პაციენტი არსებობს, გამოიტანოს ყველა დეტალი, თუ არ არსებობს, დააბრუნოს "პაციენტი ვერ მოიძებნა").

// const patients=[
// {
//     name :'givi',
//     age :60,
//     diagnosis :'gulis ukarisoba',
//     isHospitalized :true,
// },


// {
//     name :'cotne',
//     age :60,
//     diagnosis :'gulis ukarisoba',
//     isHospitalized :true,
// },


// {
//     name :'goga',
//     age :70,
//     diagnosis :'filtvebis anteba',
//     isHospitalized :true,
// },

// {
//     name :'ciala',
//     age :65,
//     diagnosis :'anTeba',
//     isHospitalized :false,
// },

// {
//     name :'dato',
//     age :45,
//     diagnosis :'gulis ukarisoba',
//     isHospitalized :false,
// },

// ]


// // // მონაცემთა 
// // // //  ჩვენება: for ციკლის გამოყენებით გამოიტანეთ ყველა პაციენტის სახელი და დიაგნოზი.
// // let resalt=[];
// // for(let i=0; i< patients.length; i++){
// // resalt=resalt+' ' +patients[i].name+'- '+patients[i].diagnosis+' .'

// // }
// // console.log(resalt)



// // if პირობებით მხოლოდ იმ პაციენტების მონაცემები გამოიტანეთ,
// // //   რომლებიც ჰოსპიტალიზებულნი არიან (isHospitalized: true).

// // for(let i=0; i< patients.length; i++){

// //  if (patients[i].isHospitalized==true){
   
// //     console.log(patients[i])
// //  }

 
// // }

// // სტრიქონების მეთოდები: toUpperCase() მეთოდის გამოყენებით ყველა პაციენტის სახელი გადაიყვანეთ დიდ ასოებში და 
// // //   გამოიტანეთ კონსოლში

// // let resalt=' ';
// // for(let i=0; i< patients.length; i++){

// //    resalt=resalt+ patients[i].name.charAt(0).toUpperCase() +patients[i].name.slice(1)+'  '
      
       
// //     }
// //     console.log(resalt)


// // საშუალო ასაკის გამოთვლა: გამოითვალეთ ყველა პაციენტის საშუალო ასაკი და დაბეჭდეთ შედეგი. დამატებითი დავალება (არასავალდებულო): შექმენით ფუნქცია findPatient(name), 
// // let resalt=0;
// // let resalt1=0;
// // for(let i=0; i< patients.length; i++){

// //    resalt=resalt+ patients[i].age
// //    resalt1=resalt/patients.length
      
       
// //     }
// //     console.log(resalt1)



// // //   რომელიც მიიღებს პაციენტის სახელს და დააბრუნებს მის სრულ ინფორმაციას (თუ პაციენტი არსებობს, გამოიტანოს ყველა დეტალი, 
// // თუ არ არსებობს, დააბრუნოს "პაციენტი ვერ მოიძებნა").
// //


// let resalt=' ';
//  function findPatient(name){
     
//     for(let i=0; i< patients.length; i++)
        
//          {

//          if (patients[i].name.includes(name)){
//             return patients[i]

            
//          }
//      }
//      return 'ar moiZebna'
//  }


//  let resalt1 =findPatient('cotne')
//  console.log(resalt1)


// // პაციენტის ძიება: მომხმარებელს (prompt()-ის მეშვეობით) შემოატანინეთ დიაგნოზი და გამოიტანეთ იმ პაციენტების მონაცემები, რომლებსაც ეს დიაგნოზი აქვთ. 
// // ??????????????????????????????????????????????

